Enter unit
Enter structDef
consume(STRUCT) => consumed
consume(ID) => consumed
consume(LACC) => consumed
Enter varDef
Enter typeBase
consume(TYPE_INT) => consumed
Exit typeBase (OK)
consume(ID) => consumed
Enter arrayDecl
consume(LBRACKET) => found SEMICOLON
Exit arrayDecl (FAIL)
consume(SEMICOLON) => consumed
Exit varDef (OK)
Enter varDef
Enter typeBase
consume(TYPE_INT) => consumed
Exit typeBase (OK)
consume(ID) => consumed
Enter arrayDecl
consume(LBRACKET) => found SEMICOLON
Exit arrayDecl (FAIL)
consume(SEMICOLON) => consumed
Exit varDef (OK)
Enter varDef
Enter typeBase
consume(TYPE_INT) => found RACC
consume(TYPE_DOUBLE) => found RACC
consume(TYPE_CHAR) => found RACC
consume(STRUCT) => found RACC
Exit typeBase (FAIL)
Exit varDef (FAIL)
consume(RACC) => consumed
consume(SEMICOLON) => consumed
Exit structDef (OK)
Enter structDef
consume(STRUCT) => consumed
consume(ID) => consumed
consume(LACC) => consumed
Enter varDef
Enter typeBase
consume(TYPE_INT) => found TYPE_DOUBLE
consume(TYPE_DOUBLE) => consumed
Exit typeBase (OK)
consume(ID) => consumed
Enter arrayDecl
consume(LBRACKET) => found SEMICOLON
Exit arrayDecl (FAIL)
consume(SEMICOLON) => consumed
Exit varDef (OK)
Enter varDef
Enter typeBase
consume(TYPE_INT) => found TYPE_CHAR
consume(TYPE_DOUBLE) => found TYPE_CHAR
consume(TYPE_CHAR) => consumed
Exit typeBase (OK)
consume(ID) => consumed
Enter arrayDecl
consume(LBRACKET) => found SEMICOLON
Exit arrayDecl (FAIL)
consume(SEMICOLON) => consumed
Exit varDef (OK)
Enter varDef
Enter typeBase
consume(TYPE_INT) => found RACC
consume(TYPE_DOUBLE) => found RACC
consume(TYPE_CHAR) => found RACC
consume(STRUCT) => found RACC
Exit typeBase (FAIL)
Exit varDef (FAIL)
consume(RACC) => consumed
consume(SEMICOLON) => consumed
Exit structDef (OK)
Enter structDef
consume(STRUCT) => found VOID
Exit structDef (FAIL)
Enter fnDef
Enter typeBase
consume(TYPE_INT) => found VOID
consume(TYPE_DOUBLE) => found VOID
consume(TYPE_CHAR) => found VOID
consume(STRUCT) => found VOID
Exit typeBase (FAIL)
consume(VOID) => consumed
consume(ID) => consumed
consume(LPAR) => consumed
Enter fnParam
Enter typeBase
consume(TYPE_INT) => found RPAR
consume(TYPE_DOUBLE) => found RPAR
consume(TYPE_CHAR) => found RPAR
consume(STRUCT) => found RPAR
Exit typeBase (FAIL)
Exit fnParam (FAIL)
consume(RPAR) => consumed
Enter stmCompound
consume(LACC) => consumed
Enter varDef
Enter typeBase
consume(TYPE_INT) => found RACC
consume(TYPE_DOUBLE) => found RACC
consume(TYPE_CHAR) => found RACC
consume(STRUCT) => found RACC
Exit typeBase (FAIL)
Exit varDef (FAIL)
Enter stm
Enter stmCompound
consume(LACC) => found RACC
Exit stmCompound (FAIL)
consume(IF) => found RACC
consume(WHILE) => found RACC
consume(RETURN) => found RACC
Enter expr
Enter exprAssign
consume(SUB) => found RACC
consume(NOT) => found RACC
Enter exprPostfix
consume(ID) => found RACC
consume(INT) => found RACC
consume(DOUBLE) => found RACC
consume(CHAR) => found RACC
consume(STRING) => found RACC
consume(LPAR) => found RACC
Exit exprPostfix (FAIL)
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
consume(LPAR) => found RACC
consume(SUB) => found RACC
consume(NOT) => found RACC
Enter exprPostfix
consume(ID) => found RACC
consume(INT) => found RACC
consume(DOUBLE) => found RACC
consume(CHAR) => found RACC
consume(STRING) => found RACC
consume(LPAR) => found RACC
Exit exprPostfix (FAIL)
Exit exprCast (FAIL)
Exit exprMul (FAIL)
Exit exprAdd (FAIL)
Exit exprRel (FAIL)
Exit exprEq (FAIL)
Exit exprAnd (FAIL)
Exit exprOr (FAIL)
Exit exprAssign (FAIL)
Exit expr (FAIL)
consume(SEMICOLON) => found RACC
Exit stm (FAIL)
consume(RACC) => consumed
Exit stmCompound (OK)
Exit fnDef (OK)
Enter structDef
consume(STRUCT) => found TYPE_INT
Exit structDef (FAIL)
Enter fnDef
Enter typeBase
consume(TYPE_INT) => consumed
Exit typeBase (OK)
consume(ID) => consumed
consume(LPAR) => consumed
Enter fnParam
Enter typeBase
consume(TYPE_INT) => found RPAR
consume(TYPE_DOUBLE) => found RPAR
consume(TYPE_CHAR) => found RPAR
consume(STRUCT) => found RPAR
Exit typeBase (FAIL)
Exit fnParam (FAIL)
consume(RPAR) => consumed
Enter stmCompound
consume(LACC) => consumed
Enter varDef
Enter typeBase
consume(TYPE_INT) => found RETURN
consume(TYPE_DOUBLE) => found RETURN
consume(TYPE_CHAR) => found RETURN
consume(STRUCT) => found RETURN
Exit typeBase (FAIL)
Exit varDef (FAIL)
Enter stm
Enter stmCompound
consume(LACC) => found RETURN
Exit stmCompound (FAIL)
consume(IF) => found RETURN
consume(WHILE) => found RETURN
consume(RETURN) => consumed
Enter expr
Enter exprAssign
consume(SUB) => found INT
consume(NOT) => found INT
Enter exprPostfix
consume(ID) => found INT
consume(INT) => consumed
Enter exprPostfixPrim
consume(LBRACKET) => found SEMICOLON
consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
consume(ASSIGN) => found SEMICOLON
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
consume(LPAR) => found INT
consume(SUB) => found INT
consume(NOT) => found INT
Enter exprPostfix
consume(ID) => found INT
consume(INT) => consumed
Enter exprPostfixPrim
consume(LBRACKET) => found SEMICOLON
consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprCast (OK)
Enter exprMulPrim
consume(MUL) => found SEMICOLON
consume(DIV) => found SEMICOLON
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
consume(ADD) => found SEMICOLON
consume(SUB) => found SEMICOLON
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
consume(LESS) => found SEMICOLON
consume(LESSEQ) => found SEMICOLON
consume(GREATER) => found SEMICOLON
consume(GREATEREQ) => found SEMICOLON
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
consume(EQUAL) => found SEMICOLON
consume(NOTEQ) => found SEMICOLON
Exit exprEqPrim (OK)
Exit exprEq (OK)
consume(AND) => found SEMICOLON
Exit exprAnd (OK)
consume(OR) => found SEMICOLON
Exit exprOr (OK)
Exit exprAssign (OK)
Exit expr (OK)
consume(SEMICOLON) => consumed
Exit stm (OK)
Enter varDef
Enter typeBase
consume(TYPE_INT) => found RACC
consume(TYPE_DOUBLE) => found RACC
consume(TYPE_CHAR) => found RACC
consume(STRUCT) => found RACC
Exit typeBase (FAIL)
Exit varDef (FAIL)
Enter stm
Enter stmCompound
consume(LACC) => found RACC
Exit stmCompound (FAIL)
consume(IF) => found RACC
consume(WHILE) => found RACC
consume(RETURN) => found RACC
Enter expr
Enter exprAssign
consume(SUB) => found RACC
consume(NOT) => found RACC
Enter exprPostfix
consume(ID) => found RACC
consume(INT) => found RACC
consume(DOUBLE) => found RACC
consume(CHAR) => found RACC
consume(STRING) => found RACC
consume(LPAR) => found RACC
Exit exprPostfix (FAIL)
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
consume(LPAR) => found RACC
consume(SUB) => found RACC
consume(NOT) => found RACC
Enter exprPostfix
consume(ID) => found RACC
consume(INT) => found RACC
consume(DOUBLE) => found RACC
consume(CHAR) => found RACC
consume(STRING) => found RACC
consume(LPAR) => found RACC
Exit exprPostfix (FAIL)
Exit exprCast (FAIL)
Exit exprMul (FAIL)
Exit exprAdd (FAIL)
Exit exprRel (FAIL)
Exit exprEq (FAIL)
Exit exprAnd (FAIL)
Exit exprOr (FAIL)
Exit exprAssign (FAIL)
Exit expr (FAIL)
consume(SEMICOLON) => found RACC
Exit stm (FAIL)
consume(RACC) => consumed
Exit stmCompound (OK)
Exit fnDef (OK)
Enter structDef
consume(STRUCT) => found TYPE_INT
Exit structDef (FAIL)
Enter fnDef
Enter typeBase
consume(TYPE_INT) => consumed
Exit typeBase (OK)
consume(ID) => consumed
consume(LPAR) => consumed
Enter fnParam
Enter typeBase
consume(TYPE_INT) => consumed
Exit typeBase (OK)
consume(ID) => consumed
Enter arrayDecl
consume(LBRACKET) => found RPAR
Exit arrayDecl (FAIL)
Exit fnParam (OK)
consume(COMMA) => found RPAR
consume(RPAR) => consumed
Enter stmCompound
consume(LACC) => consumed
Enter varDef
Enter typeBase
consume(TYPE_INT) => found RETURN
consume(TYPE_DOUBLE) => found RETURN
consume(TYPE_CHAR) => found RETURN
consume(STRUCT) => found RETURN
Exit typeBase (FAIL)
Exit varDef (FAIL)
Enter stm
Enter stmCompound
consume(LACC) => found RETURN
Exit stmCompound (FAIL)
consume(IF) => found RETURN
consume(WHILE) => found RETURN
consume(RETURN) => consumed
Enter expr
Enter exprAssign
consume(SUB) => found ID
consume(NOT) => found ID
Enter exprPostfix
consume(ID) => consumed
consume(LPAR) => found SEMICOLON
Enter exprPostfixPrim
consume(LBRACKET) => found SEMICOLON
consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
consume(ASSIGN) => found SEMICOLON
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
consume(LPAR) => found ID
consume(SUB) => found ID
consume(NOT) => found ID
Enter exprPostfix
consume(ID) => consumed
consume(LPAR) => found SEMICOLON
Enter exprPostfixPrim
consume(LBRACKET) => found SEMICOLON
consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprCast (OK)
Enter exprMulPrim
consume(MUL) => found SEMICOLON
consume(DIV) => found SEMICOLON
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
consume(ADD) => found SEMICOLON
consume(SUB) => found SEMICOLON
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
consume(LESS) => found SEMICOLON
consume(LESSEQ) => found SEMICOLON
consume(GREATER) => found SEMICOLON
consume(GREATEREQ) => found SEMICOLON
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
consume(EQUAL) => found SEMICOLON
consume(NOTEQ) => found SEMICOLON
Exit exprEqPrim (OK)
Exit exprEq (OK)
consume(AND) => found SEMICOLON
Exit exprAnd (OK)
consume(OR) => found SEMICOLON
Exit exprOr (OK)
Exit exprAssign (OK)
Exit expr (OK)
consume(SEMICOLON) => consumed
Exit stm (OK)
Enter varDef
Enter typeBase
consume(TYPE_INT) => found RACC
consume(TYPE_DOUBLE) => found RACC
consume(TYPE_CHAR) => found RACC
consume(STRUCT) => found RACC
Exit typeBase (FAIL)
Exit varDef (FAIL)
Enter stm
Enter stmCompound
consume(LACC) => found RACC
Exit stmCompound (FAIL)
consume(IF) => found RACC
consume(WHILE) => found RACC
consume(RETURN) => found RACC
Enter expr
Enter exprAssign
consume(SUB) => found RACC
consume(NOT) => found RACC
Enter exprPostfix
consume(ID) => found RACC
consume(INT) => found RACC
consume(DOUBLE) => found RACC
consume(CHAR) => found RACC
consume(STRING) => found RACC
consume(LPAR) => found RACC
Exit exprPostfix (FAIL)
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
consume(LPAR) => found RACC
consume(SUB) => found RACC
consume(NOT) => found RACC
Enter exprPostfix
consume(ID) => found RACC
consume(INT) => found RACC
consume(DOUBLE) => found RACC
consume(CHAR) => found RACC
consume(STRING) => found RACC
consume(LPAR) => found RACC
Exit exprPostfix (FAIL)
Exit exprCast (FAIL)
Exit exprMul (FAIL)
Exit exprAdd (FAIL)
Exit exprRel (FAIL)
Exit exprEq (FAIL)
Exit exprAnd (FAIL)
Exit exprOr (FAIL)
Exit exprAssign (FAIL)
Exit expr (FAIL)
consume(SEMICOLON) => found RACC
Exit stm (FAIL)
consume(RACC) => consumed
Exit stmCompound (OK)
Exit fnDef (OK)
Enter structDef
consume(STRUCT) => found TYPE_CHAR
Exit structDef (FAIL)
Enter fnDef
Enter typeBase
consume(TYPE_INT) => found TYPE_CHAR
consume(TYPE_DOUBLE) => found TYPE_CHAR
consume(TYPE_CHAR) => consumed
Exit typeBase (OK)
consume(ID) => consumed
consume(LPAR) => consumed
Enter fnParam
Enter typeBase
consume(TYPE_INT) => found TYPE_CHAR
consume(TYPE_DOUBLE) => found TYPE_CHAR
consume(TYPE_CHAR) => consumed
Exit typeBase (OK)
consume(ID) => consumed
Enter arrayDecl
consume(LBRACKET) => found RPAR
Exit arrayDecl (FAIL)
Exit fnParam (OK)
consume(COMMA) => found RPAR
consume(RPAR) => consumed
Enter stmCompound
consume(LACC) => consumed
Enter varDef
Enter typeBase
consume(TYPE_INT) => found RETURN
consume(TYPE_DOUBLE) => found RETURN
consume(TYPE_CHAR) => found RETURN
consume(STRUCT) => found RETURN
Exit typeBase (FAIL)
Exit varDef (FAIL)
Enter stm
Enter stmCompound
consume(LACC) => found RETURN
Exit stmCompound (FAIL)
consume(IF) => found RETURN
consume(WHILE) => found RETURN
consume(RETURN) => consumed
Enter expr
Enter exprAssign
consume(SUB) => found ID
consume(NOT) => found ID
Enter exprPostfix
consume(ID) => consumed
consume(LPAR) => found SEMICOLON
Enter exprPostfixPrim
consume(LBRACKET) => found SEMICOLON
consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
consume(ASSIGN) => found SEMICOLON
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
consume(LPAR) => found ID
consume(SUB) => found ID
consume(NOT) => found ID
Enter exprPostfix
consume(ID) => consumed
consume(LPAR) => found SEMICOLON
Enter exprPostfixPrim
consume(LBRACKET) => found SEMICOLON
consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprCast (OK)
Enter exprMulPrim
consume(MUL) => found SEMICOLON
consume(DIV) => found SEMICOLON
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
consume(ADD) => found SEMICOLON
consume(SUB) => found SEMICOLON
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
consume(LESS) => found SEMICOLON
consume(LESSEQ) => found SEMICOLON
consume(GREATER) => found SEMICOLON
consume(GREATEREQ) => found SEMICOLON
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
consume(EQUAL) => found SEMICOLON
consume(NOTEQ) => found SEMICOLON
Exit exprEqPrim (OK)
Exit exprEq (OK)
consume(AND) => found SEMICOLON
Exit exprAnd (OK)
consume(OR) => found SEMICOLON
Exit exprOr (OK)
Exit exprAssign (OK)
Exit expr (OK)
consume(SEMICOLON) => consumed
Exit stm (OK)
Enter varDef
Enter typeBase
consume(TYPE_INT) => found RACC
consume(TYPE_DOUBLE) => found RACC
consume(TYPE_CHAR) => found RACC
consume(STRUCT) => found RACC
Exit typeBase (FAIL)
Exit varDef (FAIL)
Enter stm
Enter stmCompound
consume(LACC) => found RACC
Exit stmCompound (FAIL)
consume(IF) => found RACC
consume(WHILE) => found RACC
consume(RETURN) => found RACC
Enter expr
Enter exprAssign
consume(SUB) => found RACC
consume(NOT) => found RACC
Enter exprPostfix
consume(ID) => found RACC
consume(INT) => found RACC
consume(DOUBLE) => found RACC
consume(CHAR) => found RACC
consume(STRING) => found RACC
consume(LPAR) => found RACC
Exit exprPostfix (FAIL)
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
consume(LPAR) => found RACC
consume(SUB) => found RACC
consume(NOT) => found RACC
Enter exprPostfix
consume(ID) => found RACC
consume(INT) => found RACC
consume(DOUBLE) => found RACC
consume(CHAR) => found RACC
consume(STRING) => found RACC
consume(LPAR) => found RACC
Exit exprPostfix (FAIL)
Exit exprCast (FAIL)
Exit exprMul (FAIL)
Exit exprAdd (FAIL)
Exit exprRel (FAIL)
Exit exprEq (FAIL)
Exit exprAnd (FAIL)
Exit exprOr (FAIL)
Exit exprAssign (FAIL)
Exit expr (FAIL)
consume(SEMICOLON) => found RACC
Exit stm (FAIL)
consume(RACC) => consumed
Exit stmCompound (OK)
Exit fnDef (OK)
Enter structDef
consume(STRUCT) => found TYPE_INT
Exit structDef (FAIL)
Enter fnDef
Enter typeBase
consume(TYPE_INT) => consumed
Exit typeBase (OK)
consume(ID) => consumed
consume(LPAR) => consumed
Enter fnParam
Enter typeBase
consume(TYPE_INT) => consumed
Exit typeBase (OK)
consume(ID) => consumed
Enter arrayDecl
consume(LBRACKET) => found COMMA
Exit arrayDecl (FAIL)
Exit fnParam (OK)
consume(COMMA) => consumed
Enter fnParam
Enter typeBase
consume(TYPE_INT) => found TYPE_CHAR
consume(TYPE_DOUBLE) => found TYPE_CHAR
consume(TYPE_CHAR) => consumed
Exit typeBase (OK)
consume(ID) => consumed
Enter arrayDecl
consume(LBRACKET) => found RPAR
Exit arrayDecl (FAIL)
Exit fnParam (OK)
consume(COMMA) => found RPAR
consume(RPAR) => consumed
Enter stmCompound
consume(LACC) => consumed
Enter varDef
Enter typeBase
consume(TYPE_INT) => found RETURN
consume(TYPE_DOUBLE) => found RETURN
consume(TYPE_CHAR) => found RETURN
consume(STRUCT) => found RETURN
Exit typeBase (FAIL)
Exit varDef (FAIL)
Enter stm
Enter stmCompound
consume(LACC) => found RETURN
Exit stmCompound (FAIL)
consume(IF) => found RETURN
consume(WHILE) => found RETURN
consume(RETURN) => consumed
Enter expr
Enter exprAssign
consume(SUB) => found ID
consume(NOT) => found ID
Enter exprPostfix
consume(ID) => consumed
consume(LPAR) => found ADD
Enter exprPostfixPrim
consume(LBRACKET) => found ADD
consume(DOT) => found ADD
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
consume(ASSIGN) => found ADD
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
consume(LPAR) => found ID
consume(SUB) => found ID
consume(NOT) => found ID
Enter exprPostfix
consume(ID) => consumed
consume(LPAR) => found ADD
Enter exprPostfixPrim
consume(LBRACKET) => found ADD
consume(DOT) => found ADD
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprCast (OK)
Enter exprMulPrim
consume(MUL) => found ADD
consume(DIV) => found ADD
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
consume(ADD) => consumed
Enter exprMul
Enter exprCast
consume(LPAR) => found ID
consume(SUB) => found ID
consume(NOT) => found ID
Enter exprPostfix
consume(ID) => consumed
consume(LPAR) => found SEMICOLON
Enter exprPostfixPrim
consume(LBRACKET) => found SEMICOLON
consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprCast (OK)
Enter exprMulPrim
consume(MUL) => found SEMICOLON
consume(DIV) => found SEMICOLON
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
consume(ADD) => found SEMICOLON
consume(SUB) => found SEMICOLON
Exit exprAddPrim (OK)
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
consume(LESS) => found SEMICOLON
consume(LESSEQ) => found SEMICOLON
consume(GREATER) => found SEMICOLON
consume(GREATEREQ) => found SEMICOLON
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
consume(EQUAL) => found SEMICOLON
consume(NOTEQ) => found SEMICOLON
Exit exprEqPrim (OK)
Exit exprEq (OK)
consume(AND) => found SEMICOLON
Exit exprAnd (OK)
consume(OR) => found SEMICOLON
Exit exprOr (OK)
Exit exprAssign (OK)
Exit expr (OK)
consume(SEMICOLON) => consumed
Exit stm (OK)
Enter varDef
Enter typeBase
consume(TYPE_INT) => found RACC
consume(TYPE_DOUBLE) => found RACC
consume(TYPE_CHAR) => found RACC
consume(STRUCT) => found RACC
Exit typeBase (FAIL)
Exit varDef (FAIL)
Enter stm
Enter stmCompound
consume(LACC) => found RACC
Exit stmCompound (FAIL)
consume(IF) => found RACC
consume(WHILE) => found RACC
consume(RETURN) => found RACC
Enter expr
Enter exprAssign
consume(SUB) => found RACC
consume(NOT) => found RACC
Enter exprPostfix
consume(ID) => found RACC
consume(INT) => found RACC
consume(DOUBLE) => found RACC
consume(CHAR) => found RACC
consume(STRING) => found RACC
consume(LPAR) => found RACC
Exit exprPostfix (FAIL)
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
consume(LPAR) => found RACC
consume(SUB) => found RACC
consume(NOT) => found RACC
Enter exprPostfix
consume(ID) => found RACC
consume(INT) => found RACC
consume(DOUBLE) => found RACC
consume(CHAR) => found RACC
consume(STRING) => found RACC
consume(LPAR) => found RACC
Exit exprPostfix (FAIL)
Exit exprCast (FAIL)
Exit exprMul (FAIL)
Exit exprAdd (FAIL)
Exit exprRel (FAIL)
Exit exprEq (FAIL)
Exit exprAnd (FAIL)
Exit exprOr (FAIL)
Exit exprAssign (FAIL)
Exit expr (FAIL)
consume(SEMICOLON) => found RACC
Exit stm (FAIL)
consume(RACC) => consumed
Exit stmCompound (OK)
Exit fnDef (OK)
Enter structDef
consume(STRUCT) => consumed
consume(ID) => consumed
Exit structDef (FAIL)
Enter fnDef
Enter typeBase
consume(TYPE_INT) => found STRUCT
consume(TYPE_DOUBLE) => found STRUCT
consume(TYPE_CHAR) => found STRUCT
consume(STRUCT) => consumed
consume(ID) => consumed
Exit typeBase (OK)
consume(ID) => consumed
consume(LPAR) => consumed
Enter fnParam
Enter typeBase
consume(TYPE_INT) => found RPAR
consume(TYPE_DOUBLE) => found RPAR
consume(TYPE_CHAR) => found RPAR
consume(STRUCT) => found RPAR
Exit typeBase (FAIL)
Exit fnParam (FAIL)
consume(RPAR) => consumed
Enter stmCompound
consume(LACC) => consumed
Enter varDef
Enter typeBase
consume(TYPE_INT) => found STRUCT
consume(TYPE_DOUBLE) => found STRUCT
consume(TYPE_CHAR) => found STRUCT
consume(STRUCT) => consumed
consume(ID) => consumed
Exit typeBase (OK)
consume(ID) => consumed
Enter arrayDecl
consume(LBRACKET) => found SEMICOLON
Exit arrayDecl (FAIL)
consume(SEMICOLON) => consumed
Exit varDef (OK)
Enter varDef
Enter typeBase
consume(TYPE_INT) => found RETURN
consume(TYPE_DOUBLE) => found RETURN
consume(TYPE_CHAR) => found RETURN
consume(STRUCT) => found RETURN
Exit typeBase (FAIL)
Exit varDef (FAIL)
Enter stm
Enter stmCompound
consume(LACC) => found RETURN
Exit stmCompound (FAIL)
consume(IF) => found RETURN
consume(WHILE) => found RETURN
consume(RETURN) => consumed
Enter expr
Enter exprAssign
consume(SUB) => found ID
consume(NOT) => found ID
Enter exprPostfix
consume(ID) => consumed
consume(LPAR) => found SEMICOLON
Enter exprPostfixPrim
consume(LBRACKET) => found SEMICOLON
consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
consume(ASSIGN) => found SEMICOLON
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
consume(LPAR) => found ID
consume(SUB) => found ID
consume(NOT) => found ID
Enter exprPostfix
consume(ID) => consumed
consume(LPAR) => found SEMICOLON
Enter exprPostfixPrim
consume(LBRACKET) => found SEMICOLON
consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprCast (OK)
Enter exprMulPrim
consume(MUL) => found SEMICOLON
consume(DIV) => found SEMICOLON
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
consume(ADD) => found SEMICOLON
consume(SUB) => found SEMICOLON
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
consume(LESS) => found SEMICOLON
consume(LESSEQ) => found SEMICOLON
consume(GREATER) => found SEMICOLON
consume(GREATEREQ) => found SEMICOLON
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
consume(EQUAL) => found SEMICOLON
consume(NOTEQ) => found SEMICOLON
Exit exprEqPrim (OK)
Exit exprEq (OK)
consume(AND) => found SEMICOLON
Exit exprAnd (OK)
consume(OR) => found SEMICOLON
Exit exprOr (OK)
Exit exprAssign (OK)
Exit expr (OK)
consume(SEMICOLON) => consumed
Exit stm (OK)
Enter varDef
Enter typeBase
consume(TYPE_INT) => found RACC
consume(TYPE_DOUBLE) => found RACC
consume(TYPE_CHAR) => found RACC
consume(STRUCT) => found RACC
Exit typeBase (FAIL)
Exit varDef (FAIL)
Enter stm
Enter stmCompound
consume(LACC) => found RACC
Exit stmCompound (FAIL)
consume(IF) => found RACC
consume(WHILE) => found RACC
consume(RETURN) => found RACC
Enter expr
Enter exprAssign
consume(SUB) => found RACC
consume(NOT) => found RACC
Enter exprPostfix
consume(ID) => found RACC
consume(INT) => found RACC
consume(DOUBLE) => found RACC
consume(CHAR) => found RACC
consume(STRING) => found RACC
consume(LPAR) => found RACC
Exit exprPostfix (FAIL)
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
consume(LPAR) => found RACC
consume(SUB) => found RACC
consume(NOT) => found RACC
Enter exprPostfix
consume(ID) => found RACC
consume(INT) => found RACC
consume(DOUBLE) => found RACC
consume(CHAR) => found RACC
consume(STRING) => found RACC
consume(LPAR) => found RACC
Exit exprPostfix (FAIL)
Exit exprCast (FAIL)
Exit exprMul (FAIL)
Exit exprAdd (FAIL)
Exit exprRel (FAIL)
Exit exprEq (FAIL)
Exit exprAnd (FAIL)
Exit exprOr (FAIL)
Exit exprAssign (FAIL)
Exit expr (FAIL)
consume(SEMICOLON) => found RACC
Exit stm (FAIL)
consume(RACC) => consumed
Exit stmCompound (OK)
Exit fnDef (OK)
Enter structDef
consume(STRUCT) => found VOID
Exit structDef (FAIL)
Enter fnDef
Enter typeBase
consume(TYPE_INT) => found VOID
consume(TYPE_DOUBLE) => found VOID
consume(TYPE_CHAR) => found VOID
consume(STRUCT) => found VOID
Exit typeBase (FAIL)
consume(VOID) => consumed
consume(ID) => consumed
consume(LPAR) => consumed
Enter fnParam
Enter typeBase
consume(TYPE_INT) => found RPAR
consume(TYPE_DOUBLE) => found RPAR
consume(TYPE_CHAR) => found RPAR
consume(STRUCT) => found RPAR
Exit typeBase (FAIL)
Exit fnParam (FAIL)
consume(RPAR) => consumed
Enter stmCompound
consume(LACC) => consumed
Enter varDef
Enter typeBase
consume(TYPE_INT) => consumed
Exit typeBase (OK)
consume(ID) => consumed
Enter arrayDecl
consume(LBRACKET) => found SEMICOLON
Exit arrayDecl (FAIL)
consume(SEMICOLON) => consumed
Exit varDef (OK)
Enter varDef
Enter typeBase
consume(TYPE_INT) => found ID
consume(TYPE_DOUBLE) => found ID
consume(TYPE_CHAR) => found ID
consume(STRUCT) => found ID
Exit typeBase (FAIL)
Exit varDef (FAIL)
Enter stm
Enter stmCompound
consume(LACC) => found ID
Exit stmCompound (FAIL)
consume(IF) => found ID
consume(WHILE) => found ID
consume(RETURN) => found ID
Enter expr
Enter exprAssign
consume(SUB) => found ID
consume(NOT) => found ID
Enter exprPostfix
consume(ID) => consumed
consume(LPAR) => found ASSIGN
Enter exprPostfixPrim
consume(LBRACKET) => found ASSIGN
consume(DOT) => found ASSIGN
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
consume(ASSIGN) => consumed
Enter exprAssign
consume(SUB) => found ID
consume(NOT) => found ID
Enter exprPostfix
consume(ID) => consumed
consume(LPAR) => found SEMICOLON
